plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'com.gorylenko.gradle-git-properties' version '2.4.1'
}
String major = project.property('build.version.major')
String minor = project.property('build.version.minor')
String build = project.property('build.number')

group = 'bg.guardiankiller'
version = "$major.$minor.$build"

bootJar {
	manifest.attributes('Implementation-Version': "$version")
}

springBoot {
	mainClass = 'bg.guardiankiller.moviessocialapp.MoviesSocialAppApplication'
	buildInfo {
		version = version
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//spring-boot-starter-webflux

	implementation(
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-actuator',
			'org.springframework.boot:spring-boot-starter-thymeleaf',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter-security',
			'org.springframework.boot:spring-boot-starter-validation',
			'org.springframework.boot:spring-boot-starter-webflux'
	)

	implementation(
			'org.liquibase:liquibase-core',
			'org.modelmapper:modelmapper:3.2.0',
			'io.jsonwebtoken:jjwt:0.9.1'
	)

	runtimeOnly 'com.mysql:mysql-connector-j'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation platform('org.testcontainers:testcontainers-bom:1.19.8') //import bom
	testImplementation 'org.testcontainers:testcontainers' //no version specified
	testImplementation 'org.testcontainers:mysql' //no version specified
}

tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		csv.required = false
		html.required = true
	}
}

tasks.register('viteDeployAssets', Copy) {
	dependsOn 'frontend:viteBuild'
	from('frontend/dist/assets')
	into('src/main/resources/static/assets')
}

tasks.register('viteDeploy', Copy) {
	dependsOn 'viteDeployAssets'
	from('frontend/dist/index.html')
	into('src/main/resources/templates/')
}

tasks.named('processResources').get().dependsOn('viteDeploy')
